<?php// setting the bounding box [minX,minY,maxX,maxY]; x -> long, y -> latfunction getBounds($bounds){	$bbox = array();	array_push($bbox, (float)($bounds[0]['minlon']));	array_push($bbox, (float)($bounds[0]['minlat']));	array_push($bbox, (float)($bounds[0]['maxlon']));	array_push($bbox, (float)($bounds[0]['maxlat']));	return $bbox;}// Function to set props for a featurefunction setProps($element){	$tags = $element->xpath("tag");	for($i=0;$i<count($tags);$i++)	{		$tag = $tags[$i];		$k = (string)$tag["k"][0];		$properties[$k] = $tag["v"];	}	return $properties;}// Generic function to create a feature of given typefunction getFeature($element, $type){	$feature["geometry"]["type"] = $type;	$feature["geometry"]["coordinates"] = array();	$feature["type"] = "Feature";	$feature["properties"] = setProps($element);	return $feature;}	function osm2geo($xml)//"geoData/geo0_0.osm"{	// Initialize the empty GeoJSON object	$geo['type'] = "FeatureCollection";	$geo['features'] = array();	    $geo['bbox'] = getBounds($xml->xpath('bounds'));    // Ways    $ways = $xml->xpath("way");		for($i=0;$i<count($ways);$i++)	{		$ele = $ways[$i];        $feature = array();        // List all the nodes        $nodes = $ele->xpath("nd");		        // If first and last nd are same, then its a polygon        $last = count($nodes)-1;		if($nodes[$last]["ref"] == $nodes[0]["ref"]){            $feature = getFeature($ele, "Polygon");            array_push($feature['geometry']['coordinates'], array());        }else{            $feature = getFeature($ele, "LineString");        }		for($j=0;$j<count($nodes);$j++)		{            $node = $xml->xpath("node[@id='".$nodes[$j]["ref"]."']"); // find the node with id ref'ed in way//***			            $cords = array((float)$node[0]["lon"], (float)$node[0]["lat"]); // get the lat,lon of the node            // If polygon push it inside the cords[[]]            if($feature['geometry']['type'] == "Polygon"){                array_push($feature['geometry']['coordinates'][0],$cords);            }// if just Line push inside cords[]            else{                array_push($feature['geometry']['coordinates'],$cords);            }		}        // Save the LineString in the Main object        array_push($geo['features'], $feature);		}		return $geo;}?>